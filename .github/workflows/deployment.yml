name: Deployment

run-name: ${{ inputs.project-name || github.event.head_commit.message }}

on:
  workflow_dispatch:
    inputs:
      project-name:
        description: 'Please enter a project name'
        required: true
  push:
    branches:
      - dev

jobs:
  split_nx_projects:
    if: "!contains(github.event.head_commit.message, 'skip-deploy') && !contains(github.event.head_commit.message, 'no-deploy')"
    runs-on: ubuntu-latest
    outputs:
      project_list: ${{ steps.set_up_matrix.outputs.project_list }}
      is_affected: ${{ steps.list_affected_projects.outputs.project_list != '' }}

    permissions:
      contents: read
      actions: read
      pages: write
      id-token: write

    steps:
      # Step 1: Checkout the repository to access its files
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache npm cache and node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Set Directory as Safe
        run: |
          git config --local --add safe.directory "$GITHUB_WORKSPACE"

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        id: setSHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: ${{ steps.extract_branch.outputs.branch }}

      - run: |
          echo "BASE: ${{ steps.setSHAs.outputs.base }}"
          echo "HEAD: ${{ steps.setSHAs.outputs.head }}"

      - name: Load deployment configuration
        id: load_config
        run: |
          echo "load_config Projects in deployment" 
          config=$(cat deployment-config.json)
          project_keys=$(echo "$config" | jq -r '.projects | keys | map(@json) | @json')
          echo "project_keys=$project_keys" >> $GITHUB_ENV
          echo "Projects in deployment configuration: $project_keys"  # Debug output
          echo "::set-output name=deployment_projects::$project_keys"

      # - name: Run nx command to show affected projects
      #   uses: gh640/command-result-action@v1
      #   with:
      #     command: npx nx show projects --affected -t build --base=${{ steps.setSHAs.outputs.base }} --head=${{ steps.setSHAs.outputs.head }}
      #   id: list_affected_projects
      - name: Run nx command to show affected projects
        id: list_affected_projects
        run: |
          projects=$(npx nx show projects --affected -t build --base=${{ steps.setSHAs.outputs.base }} --head=${{ steps.setSHAs.outputs.head }})
          projects=$(echo $projects | tr '\n' ' ')
          echo "Affected projects: $projects"
          echo "::set-output name=project_list::$projects"
      # - name: Full Project list for debug reasons
      #   id: list_affected_projects
      #   run: |
      #     projects=$(echo -e "fuzzy-search-playground\nverkehrszeichenkataster\ne-auto-ladestation\ne2e-verkehrszeichenkataster\ncorona-praeventation\nluftmessstationen\ne2e-luftmessstationen\nparkscheinautomaten\nehrenamtskarte\ngeneric-topicmaps\npotenzialflaechen-online\ne2e-potenzialflaechen\nbaederkarte\nkita-finder\ndocument-viewer\ne2e-kita-finder\ne2e-verdis-desktop\nhochwasser\nstarkregen\ne2e-hochwasser\ne2e-starkregen\nklimaorte\nstadtplan\ne2e-klimaorte\ne2e-lagis-desktop\ne2e-stadtplan\nfnp-test\numweltalarm\ntailwind-playground\ntechdemo\nverdis-desktop\ncismap-playground\nlagis-desktop\nvector\nbelis-online")
      #     projects=$(echo $projects | tr '\n' ' ')
      #     echo "::set-output name=project_list::$projects"
      - name: Set up matrix
        if: steps.list_affected_projects.outputs.project_list != ''
        id: set_up_matrix
        run: |
          # Convert the string into an array by splitting on spaces
          #IFS=' ' read -r -a project_array <<< "${{ steps.list_affected_projects.outputs.project_list }}"

          projects=$(echo "${{ steps.list_affected_projects.outputs.project_list }}")
          deployments=$(echo "${{ steps.load_config.outputs.deployment_projects }}"  | jq -r '.[]' | tr '\n' ' ')

          # Convert the string into arrays by splitting on spaces
          IFS=' ' read -r -a project_array <<< "$projects"
          IFS=' ' read -r -a deployment_array <<< "$deployments"

          # Declare an empty array to store the common elements
          result_array=()



          # Print the content of deployment_array for debugging
          # echo "Deployment String: $deployments"
          # echo "Deployment array content: ${deployment_array[@]}"
          #echo "project_array content: ${project_array[@]}"

          # Declare an empty array to store the common elements
          result_array=()

          # Iterate over each element in project_array
          for project in "${project_array[@]}"; do
              # Check if the project exists in deployment_array
              if [[ " ${deployment_array[@]} " =~ " ${project} " ]]; then
                  # If it exists, add it to the result_array
                  result_array+=("$project")
              fi
          done

          # Construct the JSON string manually
          result_json="["
          for ((i=0; i<${#result_array[@]}; i++)); do
              if [[ $i -ne 0 ]]; then
                  result_json="$result_json, "
              fi
              result_json="$result_json\"${result_array[i]}\""
          done
          result_json="$result_json]"

          # Print the result JSON
          # echo "$result_json"
          echo "::set-output name=project_list::$result_json"
          echo "PROJECT_LIST=${result_json}" >> $GITHUB_ENV
      - name: Show project list
        run: |
          echo "The project list is ${{ steps.set_up_matrix.outputs.project_list }}"
          echo "Is affected: ${{ steps.list_affected_projects.outputs.project_list != '' }}"
          echo "ProjectListLength:  ${{ fromJson(steps.set_up_matrix.outputs.project_list).length }}"
  build:
    needs: split_nx_projects
    runs-on: ubuntu-latest
    if: ${{ needs.split_nx_projects.outputs.is_affected == 'true' && github.event.inputs.project-name == ''  && fromJson(needs.split_nx_projects.outputs.project_list).length > 0}}

    permissions:
      contents: read
      pages: write
      id-token: write
    strategy:
      matrix:
        project: ${{fromJson(needs.split_nx_projects.outputs.project_list)}}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Nx
        run: npm install nx@17.2.8

      - name: Read project config
        id: read_project_config
        run: echo "::set-output name=config::$(cat deployment-config.json)"
        shell: bash

      - name: Extract branch name build
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Debug branch variable
        run: echo "branch variable" ${{ steps.extract_branch.outputs.branch }}

      - name: Process deploy steps
        id: process_deploy_steps
        run: |
          config=$(cat deployment-config.json)
          deploymentProject=$(echo "$config" | jq -r '.projects["'"${{ matrix.project }}"'"].deployment.auto.'"${{ steps.extract_branch.outputs.branch }}"''.repo)
          baseUrl=$(echo "$config" | jq -r '.projects["'"${{ matrix.project }}"'"].deployment.auto.'"${{ steps.extract_branch.outputs.branch }}"''.base)
          orgDeploy=$(echo "$config" | jq -r '.projects["'"${{ matrix.project }}"'"].deployment.auto.'"${{ steps.extract_branch.outputs.branch }}"''.org)
          prjDeploy=$(echo "$config" | jq -r '.projects["'"${{ matrix.project }}"'"].deployment.auto.'"${{ steps.extract_branch.outputs.branch }}"''.prj)
          projectPath=$(echo "$config" | jq -r '.projects["'"${{ matrix.project }}"'"].projectPath')
          echo "DEPLOYMENT_PROJECT=${deploymentProject}" >> $GITHUB_ENV
          echo "BASE_URL=${baseUrl}" >> $GITHUB_ENV
          echo "PROJECT_PATH=${projectPath}" >> $GITHUB_ENV
          echo "ORG_DEPLOY=${orgDeploy}" >> $GITHUB_ENV
          echo "PRJ_DEPLOY=${prjDeploy}" >> $GITHUB_ENV
          echo "    publish_dir: ${{ env.PROJECT_PATH }}"
        shell: bash

      - name: Build project
        run: |
          if [ "${{ env.BASE_URL }}" = "null" ]; then
            base_url="https://${{ env.ORG_DEPLOY }}.github.io/${{ env.PRJ_DEPLOY }}/"
          else
            base_url="${{ env.BASE_URL }}"
          fi

          npx nx run ${{ matrix.project }}:build --configuration=production --base="$base_url"
        shell: bash

      - name: Build deployment project link
        run: |
          if [ "${{ env.DEPLOYMENT_PROJECT }}" = "null" ]; then
            deployment_project="${{ env.ORG_DEPLOY }}/${{ env.PRJ_DEPLOY }}"
          else
            deployment_project="${{ env.DEPLOYMENT_PROJECT }}"
          fi
          echo "EXTERNAL_REPO=${deployment_project}" >> $GITHUB_ENV
        shell: bash

      - name: Debug deployment variables
        run: |
          echo "DEBUG: deploymentProject = ${{ env.DEPLOYMENT_PROJECT }}"
          echo "DEBUG: projectPath = ${{ env.PROJECT_PATH }}",
          echo "DEBUG: baseUrl = ${{ env.BASE_URL }}",
        shell: bash

      - name: Deploy using GH Pages action
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.CISMET_CI_DEPLOY_PAT }}
          # deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          external_repository: ${{ env.EXTERNAL_REPO }}
          publish_dir: ${{ env.PROJECT_PATH }}

  single_build:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.project-name != '' }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v2

      - name: Get properties from json
        id: find_project
        run: |
          config=$(cat deployment-config.json)
          project_name="${{ github.event.inputs.project-name }}"
          echo "Project name is: $project_name"
          deploymentManual=$(echo "$config" | jq -r --arg project "$project_name" '.projects[$project].deployment.manual.repo')
          baseUrl=$(echo "$config" | jq -r --arg project "$project_name" '.projects[$project].deployment.manual.base')
          orgDeploy=$(echo "$config" | jq -r --arg project "$project_name" '.projects[$project].deployment.manual.org')
          prjDeploy=$(echo "$config" | jq -r --arg project "$project_name" '.projects[$project].deployment.manual.prj')
          projectPath=$(echo "$config" | jq -r --arg project "$project_name" '.projects[$project].projectPath')
          if [ "${baseUrl}" = "null" ]; then
            baseUrl="https://${orgDeploy}.github.io/${prjDeploy}/"
          else
            baseUrl="${baseUrl}"
          fi
          echo "Deployment Project name is: $deploymentManual"
          echo "Project Path is: $deploymentManual"
          echo "DEPLOYMENT_MANUAL=${deploymentManual}" >> $GITHUB_ENV
          echo "PROJECT_PATH=${projectPath}" >> $GITHUB_ENV
          echo "BASE_URL=${baseUrl}" >> $GITHUB_ENV
          echo "ORG_DEPLOY=${orgDeploy}" >> $GITHUB_ENV
          echo "PRJ_DEPLOY=${prjDeploy}" >> $GITHUB_ENV
        shell: bash

      - name: Debug of baseUrl
        run: |
          echo ----------------------------
          echo "ORG_DEPLOY: $ORG_DEPLOY"
          echo "PROJECT_PATH: $PRJ_DEPLOY"
          echo "BASE_URL: $BASE_URL"
          echo ----------------------------

      - name: Install Nx
        run: npm install nx@17.2.8

      - name: Build project
        run: |
          npx nx run ${{ github.event.inputs.project-name }}:build --configuration=production --base="$base_url"
        shell: bash

      - name: Build deployment project link
        run: |
          if [ "${{ env.DEPLOYMENT_MANUAL }}" = "null" ]; then
            deployment_project="${{ env.ORG_DEPLOY }}/${{ env.PRJ_DEPLOY }}"
          else
            deployment_project="${{ env.DEPLOYMENT_MANUAL }}"
          fi
          echo "EXTERNAL_REPO=${deployment_project}" >> $GITHUB_ENV
        shell: bash

      - name: Show deployment project and project path
        run: |
          echo "DEPLOYMENT_MANUAL: $DEPLOYMENT_MANUAL"
          echo "PROJECT_PATH: $PROJECT_PATH"
          echo "DEPLOYMENT_AUTO: $DEPLOYMENT_AUTO"

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.CISMET_CI_DEPLOY_PAT }}
          # deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          external_repository: ${{ env.EXTERNAL_REPO}}
          publish_dir: ${{ env.PROJECT_PATH }}
